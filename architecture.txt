hanami architecture:

- The core of the product is expressed by a set of use cases that the product
  implements

- The delivery mechanisms are the interfaces that makes these features
  available to the outside works


- The libraries lib/ and apps/ are home to the main parts described above.


Application core:
- The core set of functions for the app.



The lib/ directory:
- contains the entry point for the application

- all code is required and initialized under lib/
- Hanami::Model
    - the default choice for persisting Ruby objects

- Entities:
    - The core of the app
    - a domain object designed by its identity
        - deals with one and only one responsiblity: handling domain logic
       
- Domain logic: 
    - The set of values permitted for an attribute/column in a table and how
      the data can be created, stored and changed.
    
    Entity Schema:
    - Each entity holds a schema of attributes / columns:
        - The schema holds the names and types of the attributes

    - The role of a schema is to whitelist the data used during initialization.
        - also enforce data integrity
    
    - each entity has their own repository



- Repositories:
    - an object that acts as the middle man between entities and the
      persistence layer / database manipulation
    
    - Has a standard api to query and execute db commands.

    - Storage independent:
        - all queries and commands go to their designated adapters.

    - collection: a homogenous set of records.




Delivery Mechanisms:

- the files for this mechanism are found in the apps/web folder

- By default hanami generates an app called Web.
    - This application depends on the core of the product. (entities, repos's
      and other objects)

    - This app is used as a web delivery mechanism for our features.

- The application.rb file contained the Hanami app named Web::Application
    - This app configures the settings for this component in the project.

- The default app Web will be the interface the customers see.


Project Anatomy:

- Gemfile and Gemfile.lock are Bundler artifacts
- README.md tells us how to setup and use the project.
- Rakefile describes Rake task for our project.
- config/ contains an important file config/environment.rb, which is the entry point for our project. By requiring it, weâ€™ll preload our dependencies (Ruby gems), Hanami frameworks and our code.

- config.ru is a file that describes how a Rack server must run our applications.

- db/ contains database files (for File System adapter or SQLite). When our project uses a SQL database it also contains db/migrations and db/schema.sql.

- spec/ contains unit and acceptance tests.
